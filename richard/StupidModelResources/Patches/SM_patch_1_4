Index: stupidmodel/StupidModelContextBuilder.java
===================================================================
--- stupidmodel/StupidModelContextBuilder.java	(revision 699)
+++ stupidmodel/StupidModelContextBuilder.java	(working copy)
@@ -37,7 +37,6 @@
 public class StupidModelContextBuilder extends DefaultContext<Object> implements
 		ContextBuilder<Object> {
 
-	// FIXME How to infer generic types?
 	@Override
 	public Context<Object> build(final Context<Object> context) {
 		// Set a specified context ID
@@ -48,7 +47,7 @@
 		// Create a toridal space with random positioning with the specified
 		// dimensions
 		final ContinuousSpace<Object> space = ContinuousSpaceFactoryFinder
-				.createContinuousSpaceFactory(null) // No hints (?)
+				.createContinuousSpaceFactory(null) // No hints
 				.createContinuousSpace(
 						Constants.SPACE_ID,
 						context,
Index: stupidmodel/agents/Bug.java
===================================================================
--- stupidmodel/agents/Bug.java	(revision 699)
+++ stupidmodel/agents/Bug.java	(working copy)
@@ -88,6 +88,7 @@
 	 * @return the size of the bug
 	 * @since Model 2
 	 */
+	@Parameter(displayName = "Bug Size", usageName = "size")
 	public double getSize() {
 		return size;
 	}
@@ -183,7 +184,6 @@
 			return;
 		}
 
-		// CHECKME Is it needed?
 		SimUtilities.shuffle(freeCells, RandomHelper.getUniform());
 
 		// Get a random free location within sight range
@@ -290,9 +290,14 @@
 	 */
 	@Override
 	public String toString() {
+		// This may happen when testing
+		final String location = (ContextUtils.getContext(this) != null) ? getGrid()
+				.getLocation(this).toString() : "[?, ?]";
+
 		// Override default Java implementation just to have a nicer
 		// representation
-		return String.format("Bug @ location %s", getGrid().getLocation(this));
+		return String.format("Bug @ location %s, size=%f", location, size);
 	}
 
 }
+	
\ No newline at end of file
Index: stupidmodel/agents/HabitatCell.java
===================================================================
--- stupidmodel/agents/HabitatCell.java	(revision 699)
+++ stupidmodel/agents/HabitatCell.java	(working copy)
@@ -135,7 +135,7 @@
 	 * Food production is scheduled before agent actions.
 	 * </p>
 	 */
-	@ScheduledMethod(start = 1, interval = 1, priority = -2)
+	@ScheduledMethod(start = 1, interval = 1, priority = 1)
 	public void growFood() {
 		foodAvailability += RandomHelper.nextDoubleFromTo(0.0,
 				maximumFoodProductionRate);
@@ -185,7 +185,9 @@
 	public String toString() {
 		// Override default Java implementation just to have a nicer
 		// representation
-		return String.format("HabitatCell @ location (%d, %d)", x, y);
+		return String.format(
+				"HabitatCell @ location (%d, %d), foodAvailability=%f", x, y,
+				foodAvailability);
 	}
 
 }
Index: stupidmodel/observer/BugStyleOGL2D.java
===================================================================
--- stupidmodel/observer/BugStyleOGL2D.java	(revision 699)
+++ stupidmodel/observer/BugStyleOGL2D.java	(working copy)
@@ -20,9 +20,15 @@
  * white (when size is zero) to red (when size is 10 or greater).
  * </p>
  * 
+ * <p>
+ * <i>The original bound scheme was a bit modified: since white agents cannot be
+ * seen on empty cells, so we use light red if size is zero.</i>
+ * </p>
+ * 
  * @author Richard O. Legendi (richard.legendi)
  * @since 2.0-beta, 2011
- * @version $Id$
+ * @version $Id: BugStyleOGL2D.java 183 2011-05-29 17:09:27Z
+ *          richard.legendi@gmail.com $
  */
 public class BugStyleOGL2D extends DefaultStyleOGL2D {
 
@@ -34,6 +40,13 @@
 	 * a minor hex-magic to determine the actual color value.
 	 * </p>
 	 * 
+	 * @param agent
+	 *            the agent whose color should be determined; <i>may be null</i>
+	 * @return the color for the specified {@link Bug} agent created as
+	 *         <code>new Color(0xFF, strength, strength)</code> (where
+	 *         <code>strength = 200 - 20 * size of the bug</code>); <i>or
+	 *         <code>Color.BLUE</code> if the parameter was <code>null</code>
+	 *         </i>
 	 * @see repast.simphony.visualizationOGL2D.DefaultStyleOGL2D#getColor(java.lang.Object)
 	 */
 	@Override
@@ -41,15 +54,19 @@
 		if (agent instanceof Bug) {
 			final Bug bug = (Bug) agent;
 
-			assert (bug.getSize() >= 0) : String
-					.format("An agent's size property should be non-negative, but its current value is %d.",
-							bug.getSize());
+			if (bug.getSize() < 0) {
+				throw new IllegalStateException(
+						String.format(
+								"An agent's size property should be non-negative, but its current value is %f.",
+								bug.getSize()));
+			}
 
-			final int strength = (int) Math.max(255 - bug.getSize(), 0);
+			final int strength = (int) Math.max(200 - 20 * bug.getSize(), 0);
 			return new Color(0xFF, strength, strength); // 0xFFFFFF - white,
 														// 0xFF0000 - red
 		}
 
 		return super.getColor(agent);
 	}
+
 }
Index: stupidmodel/observer/FoodValueLayerStyleOGL.java
===================================================================
--- stupidmodel/observer/FoodValueLayerStyleOGL.java	(revision 699)
+++ stupidmodel/observer/FoodValueLayerStyleOGL.java	(working copy)
@@ -19,8 +19,8 @@
  * 
  * <p>
  * A cell's color on the display is shaded to reflect the food available on
- * them: it shades from white (when available food is zero) to green (when food
- * is <code>255</code> or greater).
+ * them: it shades from black (when available food is zero) to green (when food
+ * is <code>1</code> or greater).
  * </p>
  * 
  * @author rlegendi
@@ -33,7 +33,8 @@
 public class FoodValueLayerStyleOGL implements ValueLayerStyleOGL {
 
 	/** The <code>ValueLayer</code> object to reflect its values. */
-	private ValueLayer layer = null;
+	protected ValueLayer layer = null; // Protected to access from the same
+										// package for testing
 
 	/**
 	 * {@inheritDoc}
@@ -42,10 +43,22 @@
 	 * We keep a reference for the specified <code>ValueLayer</code> instance.
 	 * </p>
 	 * 
+	 * @param layer
+	 *            {@inheritDoc}; <i>cannot be <code>null</code></i>
 	 * @see repast.simphony.visualizationOGL2D.ValueLayerStyleOGL#init(repast.simphony.valueLayer.ValueLayer)
 	 */
 	@Override
 	public void init(final ValueLayer layer) {
+		if (null == layer) {
+			throw new IllegalArgumentException(
+					"Parameter layer cannot be null.");
+		}
+
+		if (this.layer != null) {
+			throw new IllegalStateException(
+					String.format("Food value layer should not be reinitialized with a new ValueLayer instance."));
+		}
+
 		this.layer = layer;
 	}
 
@@ -85,8 +98,8 @@
 							food));
 		}
 
-		final int strength = (int) Math.max(255 - food, 0);
-		return new Color(strength, 0xFF, strength); // 0xFFFFFF - white,
-													// 0x00FF00 - green
+		final int strength = (int) Math.min(200 * food, 255);
+		return new Color(0, strength, 0); // 0x000000 - black,
+											// 0x00FF00 - green
 	}
 }
