#summary StupidModel Demo project.
#sidebar TableOfContents

=Summary=
 * Source Code  : https://cscs-repast-demos.googlecode.com/svn/richard/StupidModel/trunk/
 * Platform     : [RepastSJava Repast Simphony Java]
 * Mentor       : Dr. Eric Tatara
 * Author       : [Richard Richard Oliver Legendi]

=Contents=
<wiki:toc max_depth="2" />

-----

= Introduction =
This tutorial is based on the article _[http://condor.depaul.edu/slytinen/abm/StupidModelFormulation.pdf StupidModel and Extensions: A template and teaching tool for agent-based modeling platforms]_ by Steven F. Railsback, Steven L. Lytinen and Stephen K. Jackson, and guides through a creation of a very simple model with random moving agents to a basic model with different agents interacting with each other and their surroundings in [http://repast.sourceforge.net/ Repast Simphony].

When we are finished, the running model should look like the following figure:

https://cscs-repast-demos.googlecode.com/svn/wiki/StupidModel/simulation.png

== Why the !StupidModel? ==
I am sure the !StupidModel considered a relevant learning /comparison tool for agent-based modelling. Several reference implementations may be found on [http://condor.depaul.edu/slytinen/abm/ Steven L. Lytinen's site]. Additional resources may be found at the [http://www.swarm.org/wiki/Software_templates SwarmWiki].

== Prerequisites ==
Before we start, make sure a proper installation of Repast Simphony (version 2.0 Beta, released on 12/3/2010 or later) is available to use.

Instructions on downloading and installing Repast Simphony on various platforms can be found on the [http://repast.sourceforge.net/download.html Repast download website].

Repast S can be used several ways: models may be created with [http://repast.sourceforge.net/docs/RepastFlowGettingStarted.pdf Flowcharts], a Logo-like language called [http://repast.sourceforge.net/docs/ReLogoGettingStarted.pdf ReLogo], or purely in [http://repast.sourceforge.net/docs/RepastJavaGettingStarted.pdf Java and/or Groovy], and even C++ with [http://repast.sourceforge.net/docs/RepastHPCManual.pdf Repast HPC].

In the current tutorial, we use Java to create the !StupidModel implementation with the help of the [http://repast.sourceforge.net/docs/api/repastjava/index.html Java API] offered by Repast Simphony. Following the tutorial does not require to read any of the referenced documents, however, they may be useful in the future.

= Model List =
Each section of the following tutorial first describes the !StupidModel, a set of 16 simple template models designed as examples for learning how to use agent-based modeling platforms, then contains detailed notes on the implementation in Repast Simphony. Version 1 is the basic !StupidModel, which is extremely simple. As the first exercise in a class for nonprogrammers, Version 1 can be implemented in 2-3 hours. The subsequent versions incrementally add features that are commonly used in real models. These features include model elements such as interaction among individuals and their environment, stopping rules, alternative orders in which individuals execute their actions, mortality and reproduction, file input for habitat variables, and multiple kinds of agents. Some versions simply add software tools for observing the model: probes, graphs, and file output.

The documentation for each version states its purpose-what tool or technique is illustrated by the version, describes its formulation, and provides notes on how the changes were implemented in the example software.

The complete !StupidModel list:

 # [#Basic_StupidModel Basic !StupidModel]
 # [#Bug_Growth Bug Growth]
 # [#Habitat_Cells_and_Resource Habitat Cells and Resource]
 # [#Cell_and_Bug_Probes Cell and Bug Probes]
 # [#Parameters_and_Parameter_Displays Parameters and Parameter Displays]
 # [#Histogram_Output Histogram Output]
 # [#Stopping_the_Model Stopping the Model]
 # [#File_Output File Output]
 # [#Randomized_Agent_Actions Randomized Agent Actions]
 # [#Sorted_Agent_Actions Sorted Agent Actions]
 # [#Optimal_Movement Optimal Movement]
 # [#Bug_Mortality_and_Reproduction Bug Mortality and Reproduction]
 # [#Population_Abundance_Graph Population Abundance Graph]
 # [#Random_Normal_Initial_Size Random Normal Initial Size]
 # [#Habitat_Data_from_File_Input Habitat Data from File Input]
 # [#Predators Predators]

== Basic !StupidModel ==

=== Purpose ===
This is the basic !StupidModel, an extremely simple individual-based model used as a starting point for learning Repast (or other IBM platforms).

=== Formulation ===
 * The space is a two-dimensional grid of dimensions `100 x 100`. The space is toroidal, meaning that if bugs move off one edge of the grid they appear on the opposite edge.
 * `100` bug agents are created. They have one behavior: moving to a randomly chosen grid location within `+/- 4` cells of their current location, in both the `X` and `Y` directions. If there already is a bug at the location (including the moving bug itself - bugs are not allowed to stay at their current location unless none of the neighborhood cells are vacant), then another new location is chosen. This action is executed once per time step.
 * The bugs are displayed on the space. Bugs are drawn as red circles. The display is updated at the end of each time step.
 * Instead of specifying which random number generation algorithm to use, the default generator for each platform is used.

=== Implementation Notes ===

=== Further Fun ===

 * There are alternative ways to access any grid or space elements (in particular, any defined _projection_) through the context. In this version of the model, we directly passed a reference to the created agents. Can you figure out how to access the same grid instance with the defined `GRID_ID` through the context in which the agent is? *Hint:* An agent's context may be accessed anytime with a call to `ContextUtils.getContext(this)`.
 * Try the simulation out with different different vision ranges for the agents. Run the model with different number of agents to check they are moving correctly.
 * It is quite easy to set different visualization settings, spend a little time with playing them:
   * Try setting an icon for the bugs. It is pretty easy and makes the model look nicer.
   * Set a custom background color for the simulation!
 * Try to modify the current implementation to allow multiple agents stay on the same territory!.

=== Complete Model ===

 * The [https://cscs-repast-demos.googlecode.com/svn/richard/StupidModel/tags/2011_05_26_model_01/ complete source code] of the first model is accessible from the proper SVN tag directly.

== Bug Growth ==
=== Purpose ===
Illustrate adding instance variables and methods to the agents.
=== Formulation ===
 * Add a second bug action, `grow`. Each time step, a bug grows by a fixed amount, `1.0`. So bugs need an instance variable for their size, which is initialized to `1.0`. This action is scheduled after the `move` action.
 * The bugs' color on the display is shaded to reflect their size. Bug colors shade from white when size is zero to red when size is `10` or greater.

=== Implementation Notes ===

=== Further Fun ===
 * Try to schedule the `grow()` and `move()` actions with the same priority, run the model and check in which order are the actions executed.
 * Try to create different rainbow color maps for the agents.
 * Agents' `size` property is changed by the same fixed number. Try to introduce minor heterogeneity through randomizing the `grow()` action: make the `size` property increased by a random value between the interval `[0.5, 1.5]`.

=== Complete Model ===

 * The [https://cscs-repast-demos.googlecode.com/svn/richard/StupidModel/tags/2011_05_28_model_02 complete source code] of the first model is accessible from the proper SVN tag directly.

== Habitat Cells and Resource ==
=== Purpose ===
Show how to create cell objects that represent habitat and spatial resources. Illustrate how agents and habitat cells interact.
=== Formulation ===
 * A new class, `HabitatCell`, is added. Habitat cell objects have instance variables for their `foodAvailability` and `maximumFoodProductionRate`. Cells also have a variable for the bug at their location.
 * The grid space object now holds habitat cells, not bugs.
 * Food availability is initialized to `0.0`, and maximum food production rate is initialized to `0.01`.
 * Each time step, food availability is increased by food production. Food production is a random floating point number between zero and the maximum food production.
 * Food production is scheduled before agent actions.
 * Bug growth is modified so growth equals food consumption. Food consumption is equal to the minimum of (a) the bug's maximum consumption rate (set to 1.0) and (b) the bug's cell's food availability.
 * The food consumed by each bug is subtracted from the food availability of its cell.

=== Implementation Notes ===

=== Further Fun ===
 * Try increasing the `maximumFoodProductionRate` to a relatively high value (e.g. set it to `10.0`). Make some experimental runs, and check what you see and how it fits your expectations.
 * Try using some other color values to display food availability for the grid.

=== Complete Model ===

 * The [https://to.do complete source code] of the first model is accessible from the proper SVN tag directly.


== Cell and Bug Probes ==
=== Purpose ===
Show how to make model objects probeable from the display.
=== Formulation ===
Make the bugs, and the cells, so they can be probed via mouse clicks on the display.

== Parameters and Parameter Displays ==
=== Purpose ===
Show howto define variables as parameters, and how to put parameters in the parameter settings window that appears at startup.
=== Formulation ===
Make these variables into parameters that can be accessed through the settings window:
 * Initial number of bugs (a model parameter)
 * The maximum daily food consumption (a bug parameter), and
 * The maximum food production (a cell parameter).

== Histogram Output ==
=== Purpose ===
Illustrate how to add graphs to the display. Provide the ability to see the size distribution of the agents.
=== Formulation ===
Add a histogram display showing the number of agents in each size class. (It works reasonably well to use 10 bins, set minimum to zero, and set maximum to 10.)

== Stopping the Model ==
=== Purpose ===
Show how to cause a model to stop itself upon a certain condition. Show how to "clean up" when a model stops.

=== Formulation ===
 * The model stops when the largest bug reaches a size of 100.
 * Close the graphic windows (and do any other cleanup steps) when the program stops.

== File Output ==
=== Purpose ===
Show how to write results to an output file. Illustrate how to iterate over a list.
=== Formulation ===
Each time step, write the minimum, mean, and maximum bug size on one line of an output file.

== Randomized Agent Actions ==
=== Purpose ===
Show how to randomize the order in which agents execute an action.
=== Formulation ===
The bugs' move action is altered so that the order in which bugs execute the action is shuffled each time step.

== Sorted Agent Actions ==
=== Purpose ===
Show how to sort a list of agents, and cause an agent action to be executed in size order.
=== Formulation ===
 * The list of bugs is sorted by descending size order at the start of each time step.
 * The bugs' move action is un-randomized so it is executed in descending size order.

== Optimal Movement ==
=== Purpose ===
Show how agents can identify and rank neighbor cells. Illustrate how to iterate over a list.
=== Formulation ===
 * In its move method, a bug identifies a list of all cells that are within a distance of 4 grids but do not have another bug in them. (The bug’s current cell is included on this list.)
 * The bug iterates over the list and identifies the cell with highest food availability. The bug then moves to that cell.

== Bug Mortality and Reproduction ==
=== Purpose ===
Show how to "kill" and drop objects from a model, and how to create new objects during a run.
=== Formulation ===
 * When a bug's size reaches 10, it reproduces by splitting into 5 new bugs. Each new bug has an initial size of 0.0, and the old bug disappears.
 * New bugs are placed at the first empty location randomly selected within +/- 3 cells of their parent's last location. If no location is identified within 5 random draws, then the new bug dies.
 * A new bug parameter `survivalProbability` is initialized to 0.95. Each time step, each bug draws a uniform random number, and if it is greater than `survivalProbability`, the bug dies and is dropped.
 * This mortality action is scheduled after the bug moves and grows.
 * The model stopping rule is changed: the model stops after 1000 time steps have been executed or when the number of bugs reaches zero.

== Population Abundance Graph ==
=== Purpose ===
Show how to add a simple time series graph to a model. This graph is important for understanding results now that reproduction and mortality change the abundance of bugs.
=== Formulation ===
No change is made to the model formulation. A graph is added to display the number of bugs alive at each time step.

== Random Normal Initial Size ==
=== Purpose ===
Illustrate use of random number distributions. A common use of them is to induce variability among initial individuals.
=== Formulation ===
 * Two new model parameters are added, and put on the parameter settings window: `initialBugSizeMean` and `initialBugSizeSD`. Values of these parameters are `0.1` and `0.03`.
 * Instead of initializing bug sizes to `1.0` (See [#Bug_Growth here]), sizes are drawn from a normal distribution defined by `initialBugSizeMean` and `initialBugSizeSD`. The initial size of bugs produced via reproduction is `0.0`.
 * Negative values are very likely to be drawn from normal distributions such as the one used here. To avoid them, a check is introduced to limit initial bug size to a minimum of zero.

=== Implementation Notes ===

=== Further Fun ===
 * The basic parameter settings of the _mean_ and _standard deviation_ do not really have a visible influence on the histogram of size distribution. Modify the parameters and check the histogram if you see what you expect from the modified parameter values!
 * Size of the reproduced bug agents after initialization is still homogeneous. Can you include new parameters for the spawned bug agent size to be drawn from a different normal distribution (e.g., `reproducedBugSizeMean` and `reproducedBugSizeSD` with values `1.5` and `0.7`, respectively)?

=== Complete Model ===

 * The [https://cscs-repast-demos.googlecode.com/svn/richard/StupidModel/tags/2011_06_15_model_14/ complete source code] of the first model is accessible from the proper SVN tag directly.


== Habitat Data from File Input ==
=== Purpose ===
Show how to read spatial data in from a file.
=== Formulation ===
 * Instead of assuming the space size and assuming cell food production is random (See [#Habitat_Cells_and_Resource  here]), food production rates are read in from a file. The file also determines the space size.
 * The file contains one line per cell, with (a) X coordinate, (b) Y coordinate, and (c) food production rate.
 * Food production in a cell is now equal to the production rate read in from the file, and is no longer random.
 * Now, because we are representing real habitat with real data, it no longer makes sense for the space to be toroidal. So the space objects and movement-related methods must be modified so bugs cannot move off the edge of their space.
 * The input file is `Stupid_Cell.Data`. It has X, Y, and food production data for a grid space. X ranges from 0 to 250; Y ranges from 0 to 112. The file starts with three lines of header information that is ignored by the model.
 * The cells are now displayed and colored to indicate their current food availability. Cell colors scale from black when cell food availability is zero to green when food availability is 0.5 or higher.
 * A change to the bug move method is required to avoid a very strong artifact now that cell food production is no longer random. Near the start of a simulation, many cells will have exactly the same food availability, so a bug simply would move to the first cell on its list of neighbor cells. This is always the top-left cell among the neighbors, so bugs move constantly up and left if all the cells available to them have the same food availability. This artifact is removed by randomly shuffling the list of available cells before the bug loops through it to identify the best.

== Predators ==
=== Purpose ===
Show how to create multiple classes of agents that interact.
=== Formulation ===
 * 200 predator objects are intialized and randomly distributed as the bugs are. A cell can contain a predator as well as a bug. Predators are created after bugs are.
 * Predators have one method: hunt. First, a predator looks through a shuffled list of its immediately neighboring cells (including its own cell). As soon as the predator finds a bug in one of these cells it "kills" the bug and moves into the cell. (However, if the cell already contains a predator, the hunting predator simply quits and remains at its current location.) If these cells contain no bugs, the predator moves randomly to one of them.
 * Predator hunting is scheduled after all the bug actions.

= Conclusion =

= References =
 # Steven F. Railsback, Steven L. Lytinen and Stephen K. Jackson: _'!StupidModel and Extensions: A template and teaching tool for agent-based modeling platforms'_, (December 20, 2005) http://condor.depaul.edu/~slytinen/abm/StupidModelFormulation.pdf
 # Isaac, Alan G.: _'The ABM Template Models: A Reformulation with Reference Implementations'_ Journal of Artificial Societies and Social Simulation 14 (2) 5, (2011) http://jasss.soc.surrey.ac.uk/14/2/5.html