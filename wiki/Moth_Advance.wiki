#summary A hybrid of Moth_Basic and Bug Catcher
#sidebar TableOfContents

=*Summary*=

  * Model        : Moth_Advance
  * Source Code  : https://cscs-repast-demos.googlecode.com/svn/mudit/Moth_Advance/
  * Platform     : [RepastSReLogo RepastS ReLogo]
  * Mentor       : Dr. Eric Tatara
  * Author       : [Mudit Mudit Raj Gupta]

------

=*Contents*=

<wiki:toc max_depth="2" />

------

= 1. Before Getting Started=

Before trying to use the model, make sure that Repast Simphony is installed properly (version 2.0 Beta, released on 12/3/2010 or later) is available to use.

Instructions on downloading and installing Repast Simphony on various platforms can be found on the [http://repast.sourceforge.net/download.html Repast download website].

It is suggested that you go through the following models before this model

 # Bug Catcher
 # Moth_Basic


-----

= 2. Introduction=

This is a Bio-inspired model. The behavior of Moths and their fascination towards light make them an excellent subject to study agent base analysis. The following page gives an introduction about the behavior and the hypothesis about the attraction of Moths towards light. For more details you can check out the following  [http://en.wikipedia.org/wiki/Moth page]    

The following video gives you a visual picture of the Moths' behavior towards light.

<wiki:video url="http://www.youtube.com/watch?v=s_Wgukkj-cg"/>


==Moth (A bit of Biology)==

Moth is an insect closely related to the butterfly, both being of the order Lepidoptera. Moths form the majority of this order; there are thought to be 150,000 to 250,000 different species of moth (about ten times the number of species of butterfly), with thousands of species yet to be described.Most species of moth are nocturnal, but there are crepuscular and diurnal species.[1]


==Moth and Light Source==

Moths are frequently found to circle artificial lights, although the reason for this behavior remains unknown. One hypothesis advanced to explain this behavior is that moths use a technique of celestial navigation called transverse orientation. By maintaining a constant angular relationship to a bright celestial light, such as the Moon, they can fly in a straight line. Celestial objects are so far away, that even after traveling great distances, the change in angle between the moth and the light source is negligible; further, the moon will always be in the upper part of the visual field or on the horizon. When a moth encounters a much closer artificial light and uses it for navigation, the angle changes noticeably after only a short distance, in addition to being often below the horizon.[2]

-----

=Description=

The basic algorithm used in the following model is an amalgamation of the BugCatcher model algorithm and the Moth_Basic Algorithm. Although the in this model the implementation approach is quite different.

In the Moth_Basic model we created moths and gave them a few features. Like the are attracted to light and various parameters were adjustable by the user. Please refer to the documentation of Moth_Basic for details.

The only assumption in the model was that, it was for a single light source at the center of the model.

The second model which catches bugs in the Moore's Neighborhood has some borrowed concept from this model. Please refer to the BugCatcher documentation for detail.

==Algorithm and Implementation==

The guiding algorithm is fairly simple, the model has two different types of motes:

 # Moths (Dynamic)
 # Lights (Static)

The moths wander aimlessly in the area, as soon as a moth senses light intensity, it tries to move to a point where there is light intensity. The light source size and the intensity are both adjustable by the user. The population of the moth's can be changed by the user. Initial version does not have a turn angle control but you can add one. Check out Extending the model section for helps, tips and hints on the same. The number of light source are also adjustable. Please refer to the User Panel description for details.

*Note:* The complete source code of the model can be found [https://cscs-repast-demos.googlecode.com/svn/mudit/Moth_Advance/ here]. The explanation of certain code segments (from the source code) is available here to make the reader understand the basic concept and design. 

Let us first start by talking about [https://cscs-repast-demos.googlecode.com/svn/mudit/Moth_Advance/src/moth_advance/relogo/Moth.groovy moth.groovy]. This defines the characteristics of a moth.

The first thing that we need to check is weather the mote is in the vicinity on any light source or not. This is done by checking weather the there is a light source in radius of (size of the source + intensity) from the moth. This is checked by the following code segment.

{{{

def N = count(inRadius(lights(),(source+intensity))

}}}

The functions used here are [file:///C:/RepastSimphony-2.0-beta/docs/ReLogoDocs/repast/simphony/relogo/Turtle.html#inRadius%28List,%20Number%29 inRadius()] and [file:///C:/RepastSimphony-2.0-beta/docs/ReLogoDocs/repast/simphony/relogo/Utility.html#count%28List%29 count()]. You can check out the links. inRadius returns an agent set which is a subset of the parameter 1 (lights()) and is in the distance (source+intensity) from the caller.
count() returns the number of agents in that agent set.

Depending on the value of N the behavior of the moths is decided. If there is a light source in vicinity.

{{{
                if(N>0)	
		{
                        //generate random values within source+intensity radius

			x = (random((source+intensity)))
			y = random(sqrt(((source+intensity)*    (source+intensity))-(x*x)))

                        //randomly assign signs

			if(random(2))
			{
				x=(-1)*x
			}
			if(random(2))
			{
				y=(-1)*y
			}
                      
                        //Shift the coordinates

			x = x + oneOf(inRadius(lights(),(source+intensity))).x 
			y = y + oneOf(inRadius(lights(),(source+intensity))).y 

                        //face the coordinates and move 
			facexy(x,y)
			fd(exSpeed*0.5)
		
		}
}}}

A random coordinate in a given radius is generated and then the value is shifted according to the position of the light source. The moth will face a point in the illuminated region then and move forward according to the selected excited speed.

The code is self explanatory (and well commented, just in case of doubts).

If the condition is false then the moth can move randomly in any direction (distance <200). A random point is generated where the moth faces and moves forward with normal speed.

Code is self explanatory. Check out the [file:///C:/RepastSimphony-2.0-beta/docs/ReLogoDocs/repast/simphony/relogo/Turtle.html#facexy%28Number,%20Number%29 facexy()], [file:///C:/RepastSimphony-2.0-beta/docs/ReLogoDocs/repast/simphony/relogo/Turtle.html#fd%28Number%29 fd()] and [file:///C:/RepastSimphony-2.0-beta/docs/ReLogoDocs/repast/simphony/relogo/Utility.html#random%28Number%29 random()] function from the documentation. 

Next we move on to the static motes i.e. light. There isn't much in lights behavior and thus it is skipped in this description section. This is followed by [https://cscs-repast-demos.googlecode.com/svn/mudit/Moth_Advance/src/moth_advance/relogo/UserObserver.groovy UserObserver.groovy] 



==User Panel==

_to be added soon_

==Data Sets==

_to be added soon_

==Outputters==

_to be added soon_

==Plots==

_to be added soon_

==External Plugin==

_to be added soon_

----

=4. Applications=


_to be added soon_
----

=5. Extending the Model=


_to be added soon_

----

=6. References=


[1] http://en.wikipedia.org/wiki/Moth  

[2] [http://www.npr.org/templates/story/story.php?storyId=12903572 Why Moths are attracted to flames?]