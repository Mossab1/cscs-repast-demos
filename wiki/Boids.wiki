#summary Boids Java implementation by Rowan Copley
#sidebar TableOfContents

_Wiki note: this will become two separate tutorials for the two implementations, with only code changed for each. For now this will be only the Java tutorial._

= 0. Before Beginning = 
Before we can do anything with Repast Simphony, we need to make sure that we have a proper installation of Repast Simphony 2.0. Instructions on downloading and installing Repast Simphony on various platforms can be found on the Repast website.

This tutorial will assume a familiarity with Java. The structure will be as follows: an introduction to the model; getting a framework for the model written in Java; adding the three main rules as functions; synthesizing the outputs of each rule in a useful way, and finally ideas for further extending the model.

= 1. What is Boids? =
Boids is an agent-based model which simulates the steering behavior of flocking birds using simple to understand rules. Applications of the model range from studying Artificial Life to implementing the algorithm in a flock of robots. The advantage of Boids is the bottom-up approach to flocking, rather than the top-down approach: each individual Boid need only follow a few simple rules and flocks will emerge naturally.
The overall design of the Boids algorithm is based on [http://www.red3d.com/cwr/boids/ Craig Reynold's original Boids] algorithm consists of three rules:
  * Alignment: Each Boid steers itself to align its heading with that of its neighbors
  * Cohesion: Each Boid steers itself to the average position of its flockmates
  * Separation: Each Boid steers itself in order not to crowd its neighbors

These three rules can conflict with each other, as we will see, the way that we deal with those conflicts will influence the final behavior of the flocks of Boids.

Boids is a study of the kind of algorithm that starlings might follow in order to create these spectacular clouds of birds:
<wiki:video url="http://www.youtube.com/watch?v=eakKfY5aHmY"/>

= 2. Setting up the framework =

Open Repast and switch to the Java perspective by clicking the Java button in the upper. Next, we need to create a new Java project for Repast. To do this properly, click File, go to New, and click Other. Find Repast Simphony Project in the selection box and click it. Make sure to name your project Boids, then click Next, then click Finish. 

We now have a new Repast Java project. The only files we're going to create for now are in the /src subfolder, so the rest of the project files can safely be ignored. Click on the arrow to the left of the /src subfolder. A subfolder with your project's name will drop down underneath /src. The two files inside of this subfolder can safely be deleted. In their place we can make a new Java file called Boid. To do this, right-click on the folder called Boids inside /src and click New, then click Class. Name it Boid and click Finish. 

Now let's write the driving method for each Boid object. This will be the method that is called at each tick (the unit of time for Repast). 

== step() method ==



= 3. Alignment =

The goal here is to average the heading of all Boids within a certain distance that we'll call it neighborhoodRadius. This average is the new heading of any given Boid at their next timestep.

= 4. Cohesion =

In order for a group of birds to be labeled a flock, or a group of fish to be labeled a school, they need to have a certain proximity to each other. In order to fly close to their flockmates, each Boid takes all its neighboring Boids (again, defined as all the Boids which are closer than the distance defined by neighborhood radius) and determines the average direction of them from itself. (So if there were two Boids in the neighborhood set of a particular Boid, and they were North and West or 0 and 270 degrees respectively, then the average direction of the Boids would be Northwest or 315 degrees.) If the neighboring Boids are, on average, too far away from this particular Boid, then it shifts its course to face the average direction of its neighboring Boids. 

If this is the only rule that the Boids follow, then we end up with vaguely pentagram-shaped clusters of Boids in which each Boid is continually travelling a straight line through the cluster of Boids and then turning 180 degrees and doing the same thing again. This is a fairly static end to the computation, and not very complex or interesting in the long run. 

*The Cohesion demo can be found [http://cscs-repast-demos.googlecode.com/svn/rowan/Boids_relogo_cohesion/ here].*

= 5. Separation =

Real flocks also have another key trait: the units comprising them are evenly spaced, and no one unit is crowded out. This can be accomplished very similarly to the Cohesion method above -- a set of the neighboring Boids is made. However, all Boids which are not too close (not within the desiredDistance) can be ignored. The other difference is that the Boid must turn away from, not towards, the other Boids -- but turning the complete opposite direction is too far. Thus, we can introduce a turnSpeed which determines how much the Boid is to turn away from the other Boids. 

= 6. Putting it all together =

== Adding random weights ==

= 7. Extending the model =

(0) http://www.red3d.com/cwr/boids/